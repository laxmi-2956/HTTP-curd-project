// const http = require("http");
// const cors = require("cors");
// const fs = require("fs");
// const { console } = require("inspector");
// const port = 8080;
// const server = http.createServer((req, res) => {
//   cors()(req, res, () => {
//     res.writeHead(200, { "Content-type": "text/plain" });

//     if (req.method == "GET" && req.url == "/product") {
//       fs.readFile("./db.json", "utf-8", (err, data) => {
//         if (err) {
//           res.end(err);
//         } else {
//           res.end(data);
//         }
//       });
//     } else if (req.method == "POST" && req.url == "/Addproduct") {
//       let str = "";
//       req.on("data", (chunk) => {
//         str += chunk;
//       });
//    req.on("end", () => {
//         console.log("Received Data:", str);})
//       // const productdata = {
//       //   id: 122,
//       //   title: "Mens Casual Premium Slim Fit T-Shirts ",
//       //   price: 2432.333,
//       //   description:
//       //     "Slim-fitting style, contrast raglan long sleeve, three-button henley placket, light weight & soft fabric for breathable and comfortable wearing. And Solid stitched shirts with round neck made for durability and a great fit for casual fashion wear and diehard baseball fans. The Henley style round neckline includes a three-button placket.",
//       //   category: "men's clothing",
//       //   image:
//       //     "https://fakestoreapi.com/img/71-3HjGNDUL._AC_SY879._SX._UX._SY._UY_.jpg",
//       // };

//       // fs.readFile("./db.json", "utf-8", (err, data) => {
//       //   if (err) {
//       //     res.end(err);
//       //   } else {
//       //     const newdata = JSON.parse(data);
//       //     newdata.products.push(productdata);
//       //     fs.writeFile("./db.json", JSON.stringify(newdata), (err) => {
//       //       if (err) {
//       //         console.log(err);
//       //       } else {
//       //         console.log(data);
//       //       }
//       //     });
//       //   }
//       // });
//     } else {
//       res.end("end point not matched ");
//     }
//   });
// });
// server.listen(port, () => {
//   console.log("server is running 8080");
// });








const http = require("http");
const cors = require("cors");
const fs = require("fs");
const port = 8080;

const server = http.createServer((req, res) => {
  cors()(req, res, () => {
    res.writeHead(200, { "Content-Type": "text/plain" });

    if (req.method === "GET" && req.url === "/product") {
      fs.readFile("./db.json", "utf-8", (err, data) => {
        if (err) {
          res.end(err);
        } else {
          res.end(data);
        }
      });
    } else if (req.method === "POST" && req.url === "/Addproduct") {
      let str = "";

      req.on("data", (chunk) => {
        str += chunk;
      });

      req.on("close", () => {
        console.log("Received Data:", str);

       
      
          const productData = JSON.parse(str);

          fs.readFile("./db.json", "utf-8", (err, data) => {
            if (err) {
              res.end(err);
            } else {
              const newdata = JSON.parse(data);
              newdata.products.push(productData);

              fs.writeFile("./db.json", JSON.stringify(newdata, null, 2), (err) => {
                if (err) {
                  res.end("Error saving data");
                } else {
                  res.end("Product added successfully");
                }
              });
            }
          });
      
      });

      
    } 
    
    else if (req.method === "DELETE" && req.url.startsWith("/deleteproduct/")) {
      const id = req.url.split("/")[2]; // Extract product ID from URL

      fs.readFile("./db.json", "utf-8", (err, data) => {
        if (err) {
          res.end(JSON.stringify({ error: "Failed to read data" }));
        } else {
          let newdata = JSON.parse(data);

          const initialLength = newdata.products.length;
          newdata.products = newdata.products.filter((p) => p.id != id); // Remove product

          if (newdata.products.length === initialLength) {
            res.end(JSON.stringify({ error: "Product not found" }));
            return;
          }

          fs.writeFile("./db.json", JSON.stringify(newdata, null, 2), (err) => {
            if (err) {
              res.end(JSON.stringify({ error: "Failed to save data" }));
            } else {
              res.end(JSON.stringify({ message: "Product deleted successfully" }));
            }
          });
        }
      });
    } 
    
    
    
    
    
    
    
    
    
    
    
    
    else {
      res.end("Endpoint not matched");
    }
  });
});

server.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});





  const http = require("http");
  const cors = require("cors");
  const fs = require("fs");
  const { console } = require("inspector");
  const port = 8080;

  const server = http.createServer((req, res) => {
    cors()(req, res, () => {
      res.writeHead(200, { "Content-Type": "text/plain" });

      if (req.method === "GET" && req.url === "/product") {
        fs.readFile("./db.json", "utf-8", (err, data) => {
          if (err) {
            res.end(err);
          } else {
            res.end(data);
          }
        });
      } else if (req.method === "POST" && req.url === "/Addproduct") {
        let str = "";

        req.on("data", (chunk) => {
          str += chunk;
        });

        req.on("end", () => {
          console.log("Received Data:", str);

          const productData = JSON.parse(str);

          fs.readFile("./db.json", "utf-8", (err, data) => {
            if (err) {
              res.end(err);
            } else {
              const newdata = JSON.parse(data);
              newdata.products.push({...productData,id: new date()});

              fs.writeFile("./db.json", JSON.stringify(newdata), (err) => {
                if (err) {
                  res.end("Error saving data");
                } else {
                  res.end("Product added successfully");
                }
              });
            }
          });
        });
      } 
      else if (req.method === "DELETE" && req.url.startsWith("/deleteproduct/"))
      {
  // const prId=req.url
  console.log(req.url)

      }
      
      
      
      else {
        res.end("Endpoint not matched");
      }
    });
  });

  server.listen(port, () => {
    console.log(`Server is running on port ${port}`);
  });
